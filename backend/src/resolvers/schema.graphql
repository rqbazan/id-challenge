enum ChannelType {
  p
  g
}

type Channel {
  id: ID!
  displayName: String!
  name: String!
  type: ChannelType!
}

type User {
  id: ID!
  nickname: String!
}

type Category {
  id: ID!
  name: String!
}

type Message {
  id: ID!
  content: String!
  author: User!
}

interface Chat {
  id: ID!
  channelType: ChannelType!
  lastMessage: Message!
  messages: [Message]
}

type PrivateChat implements Chat {
  id: ID!
  channelType: ChannelType!
  lastMessage: Message!
  messages: [Message]
  participateA: User!
  participateB: User!
}

type GroupChat implements Chat {
  id: ID!
  channelType: ChannelType!
  lastMessage: Message!
  messages: [Message]
  category: Category!
  participates: [User]
}

type Query {
  whoami(userId: ID!): User!
  search(displayNameLike: String!): [Channel]
  chats: [Chat]
  getChat(chatId: ID!, channelType: ChannelType!): Chat
}

type Mutation {
  sendMessage(
    content: String!
    receiverId: ID!
    channelType: ChannelType
  ): Message!
  updateUser(nickname: String!): User!
  hideMessage(messageId: ID!): Message!
}

type Subscription {
  chat(chatId: ID!): Chat
}
